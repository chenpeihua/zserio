/**
 * Automatically generated by Zserio C++ extension version 2.0.0-pre1.
 */

#ifndef PMR_POC_SAMPLE_STRUCT_H
#define PMR_POC_SAMPLE_STRUCT_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/pmr/String.h>
#include <zserio/Types.h>

#include <pmr_poc/ChildStruct.h>

namespace pmr_poc
{

class SampleStruct
{
public:
    explicit SampleStruct(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator =
                        ::zserio::pmr::PolymorphicAllocator<void>());

    ~SampleStruct() = default;

    SampleStruct(const SampleStruct&) = default;
    SampleStruct& operator=(const SampleStruct&) = default;

    SampleStruct(SampleStruct&&) = default;
    SampleStruct& operator=(SampleStruct&&) = default;

    uint8_t getUint8Field() const;

    const ::zserio::pmr::string& getStringField() const;

    const ::pmr_poc::ChildStruct& getChildField() const;

    size_t bitSizeOf(size_t bitPosition = 0) const;

    bool operator==(const SampleStruct& other) const;
    int hashCode() const;

private:
    uint8_t readUint8Field(::zserio::BitStreamReader& in);
    ::zserio::pmr::string readStringField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);
    ::pmr_poc::ChildStruct readChildField(::zserio::BitStreamReader& in,
            const ::zserio::pmr::PolymorphicAllocator<void>& allocator);

    uint8_t m_uint8Field_;
    ::zserio::pmr::string m_stringField_;
    ::pmr_poc::ChildStruct m_childField_;
};

} // namespace pmr_poc

#endif // PMR_POC_SAMPLE_STRUCT_H
