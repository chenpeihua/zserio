/**
 * Automatically generated by Zserio C++ extension version 2.0.0-pre1.
 */

#ifndef PMR_POC_CHILD_STRUCT_H
#define PMR_POC_CHILD_STRUCT_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/PreWriteAction.h>
#include <zserio/pmr/Vector.h>
#include <zserio/Arrays.h>
#include <zserio/Types.h>

namespace pmr_poc
{

template <typename ALLOC>
class ChildStruct
{
public:
    explicit ChildStruct(::zserio::BitStreamReader& in,
            const ALLOC& allocator = ALLOC());

    ~ChildStruct() = default;

    ChildStruct(const ChildStruct&) = default;
    ChildStruct& operator=(const ChildStruct&) = default;

    ChildStruct(ChildStruct&&) = default;
    ChildStruct& operator=(ChildStruct&&) = default;

    uint64_t getUint64Field() const;

    const std::vector<uint16_t, ::zserio::RebindAlloc<ALLOC, uint16_t>>& getUint16Array() const;

    size_t bitSizeOf(size_t bitPosition = 0) const;

    bool operator==(const ChildStruct& other) const;
    int hashCode() const;

    void read(::zserio::BitStreamReader& in);

private:
    uint64_t readUint64Field(::zserio::BitStreamReader& in);

    std::vector<uint16_t, ::zserio::RebindAlloc<ALLOC, uint16_t>> readUint16Array(
            ::zserio::BitStreamReader& in, const ALLOC& alloc);

    uint64_t m_uint64Field_;
    std::vector<uint16_t, ::zserio::RebindAlloc<ALLOC, uint16_t>> m_uint16Array_;
};

} // namespace pmr_poc

#include "ChildStruct.hpp"

#endif // PMR_POC_CHILD_STRUCT_H
