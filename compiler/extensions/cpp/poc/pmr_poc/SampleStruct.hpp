/**
 * Automatically generated by Zserio C++ extension version 2.0.0-pre1.
 */

#include <zserio/StringConvertUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/HashCodeUtil.h>
#include <zserio/BitPositionUtil.h>
#include <zserio/BitSizeOfCalculator.h>
#include <zserio/BitFieldUtil.h>

#include <pmr_poc/SampleStruct.h>

namespace pmr_poc
{

template <typename ALLOC>
SampleStruct<ALLOC>::SampleStruct(::zserio::BitStreamReader& in,
        const ALLOC& allocator) :
        m_uint8Field_(readUint8Field(in)),
        m_stringField_(readStringField(in, allocator)),
        m_childField_(readChildField(in, allocator))
{
}

template <typename ALLOC>
uint8_t SampleStruct<ALLOC>::getUint8Field() const
{
    return m_uint8Field_;
}

template <typename ALLOC>
const std::basic_string<char, std::char_traits<char>, ::zserio::RebindAlloc<ALLOC, char>>&
SampleStruct<ALLOC>::getStringField() const
{
    return m_stringField_;
}

template <typename ALLOC>
const ::pmr_poc::ChildStruct<ALLOC>& SampleStruct<ALLOC>::getChildField() const
{
    return m_childField_;
}

template <typename ALLOC>
size_t SampleStruct<ALLOC>::bitSizeOf(size_t bitPosition) const
{
    size_t endBitPosition = bitPosition;

    endBitPosition += UINT8_C(8);
    endBitPosition += ::zserio::bitSizeOfString(m_stringField_);
    endBitPosition += m_childField_.bitSizeOf(endBitPosition);

    return endBitPosition - bitPosition;
}

template <typename ALLOC>
bool SampleStruct<ALLOC>::operator==(const SampleStruct& other) const
{
    if (this != &other)
    {
        return
                (m_uint8Field_ == other.m_uint8Field_) &&
                (m_stringField_ == other.m_stringField_) &&
                (m_childField_ == other.m_childField_);
    }

    return true;
}

template <typename ALLOC>
int SampleStruct<ALLOC>::hashCode() const
{
    int result = ::zserio::HASH_SEED;

    result = ::zserio::calcHashCode(result, m_uint8Field_);
    result = ::zserio::calcHashCode(result, m_stringField_);
    result = ::zserio::calcHashCode(result, m_childField_);

    return result;
}

template <typename ALLOC>
uint8_t SampleStruct<ALLOC>::readUint8Field(::zserio::BitStreamReader& in)
{
    return static_cast<uint8_t>(in.readBits(UINT8_C(8)));
}

template <typename ALLOC>
std::basic_string<char, std::char_traits<char>, ::zserio::RebindAlloc<ALLOC, char>>
SampleStruct<ALLOC>::readStringField(::zserio::BitStreamReader& in, const ALLOC& allocator)
{
    return in.readString(allocator);
}

template <typename ALLOC>
::pmr_poc::ChildStruct<ALLOC> SampleStruct<ALLOC>::readChildField(::zserio::BitStreamReader& in,
        const ALLOC& allocator)
{
    return ::pmr_poc::ChildStruct<ALLOC>(in, allocator);
}

} // namespace pmr_poc
